# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.7, generator: @autorest/python@6.9.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_azure_bare_metal_instances_start_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/{azureBareMetalInstanceName}/start"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalInstanceName": _SERIALIZER.url(
            "azure_bare_metal_instance_name", azure_bare_metal_instance_name, "str", pattern=r"^[a-zA-Z0-9]+$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_restart_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/{azureBareMetalInstanceName}/restart"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalInstanceName": _SERIALIZER.url(
            "azure_bare_metal_instance_name", azure_bare_metal_instance_name, "str", pattern=r"^[a-zA-Z0-9]+$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_shutdown_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/{azureBareMetalInstanceName}/shutdown"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalInstanceName": _SERIALIZER.url(
            "azure_bare_metal_instance_name", azure_bare_metal_instance_name, "str", pattern=r"^[a-zA-Z0-9]+$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_get_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/{azureBareMetalInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalInstanceName": _SERIALIZER.url(
            "azure_bare_metal_instance_name", azure_bare_metal_instance_name, "str", pattern=r"^[a-zA-Z0-9]+$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_instances_update_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/{azureBareMetalInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalInstanceName": _SERIALIZER.url(
            "azure_bare_metal_instance_name", azure_bare_metal_instance_name, "str", pattern=r"^[a-zA-Z0-9]+$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.BareMetalInfrastructure/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_get_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_storage_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalStorageInstanceName": _SERIALIZER.url(
            "azure_bare_metal_storage_instance_name", azure_bare_metal_storage_instance_name, "str", pattern=r".*"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_create_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_storage_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalStorageInstanceName": _SERIALIZER.url(
            "azure_bare_metal_storage_instance_name", azure_bare_metal_storage_instance_name, "str", pattern=r".*"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_update_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_storage_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalStorageInstanceName": _SERIALIZER.url(
            "azure_bare_metal_storage_instance_name", azure_bare_metal_storage_instance_name, "str", pattern=r".*"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_azure_bare_metal_storage_instances_delete_request(  # pylint: disable=name-too-long
    resource_group_name: str, azure_bare_metal_storage_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-04-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "azureBareMetalStorageInstanceName": _SERIALIZER.url(
            "azure_bare_metal_storage_instance_name", azure_bare_metal_storage_instance_name, "str", pattern=r".*"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


class AzureBareMetalInstancesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.baremetalinstances.BareMetalInfrastructureClient`'s
        :attr:`azure_bare_metal_instances` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _start_initial(
        self, resource_group_name: str, azure_bare_metal_instance_name: str, **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        request = build_azure_bare_metal_instances_start_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_instance_name=azure_bare_metal_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            response_headers["location"] = self._deserialize("str", response.headers.get("location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace
    def begin_start(
        self, resource_group_name: str, azure_bare_metal_instance_name: str, **kwargs: Any
    ) -> LROPoller[JSON]:
        """Start a Bare Metal Instance.

        The operation to start an Azure Bare Metal instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "error": {
                        "code": "str",  # Optional. Server-defined set of error codes.
                        "message": "str"  # Optional. Human-readable representation of the
                          error.
                    },
                    "name": "str",  # Optional. Unique Operation Status Identifier.
                    "startTime": "str",  # Optional. Start Time when the operation was initially
                      executed.
                    "status": "str"  # Optional. Status of the operation. Known values are:
                      "Requesting", "Executing", "Succeeded", and "Failed".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._start_initial(
                resource_group_name=resource_group_name,
                azure_bare_metal_instance_name=azure_bare_metal_instance_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _restart_initial(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        force_parameter: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(force_parameter, (IOBase, bytes)):
            _content = force_parameter
        else:
            if force_parameter is not None:
                _json = force_parameter
            else:
                _json = None

        request = build_azure_bare_metal_instances_restart_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_instance_name=azure_bare_metal_instance_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            response_headers["location"] = self._deserialize("str", response.headers.get("location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @overload
    def begin_restart(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        force_parameter: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Restart a Bare Metal Instance.

        The operation to restart an Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param force_parameter: When set to 'active', this parameter empowers the server with the
         ability to forcefully terminate and halt any existing processes that may be running on the
         server. Default value is None.
        :type force_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                force_parameter = {
                    "forceState": "str"  # Optional. Whether to force restart by shutting all
                      processes. Known values are: "active" and "inactive".
                }

                # response body for status code(s): 200
                response == {
                    "error": {
                        "code": "str",  # Optional. Server-defined set of error codes.
                        "message": "str"  # Optional. Human-readable representation of the
                          error.
                    },
                    "name": "str",  # Optional. Unique Operation Status Identifier.
                    "startTime": "str",  # Optional. Start Time when the operation was initially
                      executed.
                    "status": "str"  # Optional. Status of the operation. Known values are:
                      "Requesting", "Executing", "Succeeded", and "Failed".
                }
        """

    @overload
    def begin_restart(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        force_parameter: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Restart a Bare Metal Instance.

        The operation to restart an Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param force_parameter: When set to 'active', this parameter empowers the server with the
         ability to forcefully terminate and halt any existing processes that may be running on the
         server. Default value is None.
        :type force_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "error": {
                        "code": "str",  # Optional. Server-defined set of error codes.
                        "message": "str"  # Optional. Human-readable representation of the
                          error.
                    },
                    "name": "str",  # Optional. Unique Operation Status Identifier.
                    "startTime": "str",  # Optional. Start Time when the operation was initially
                      executed.
                    "status": "str"  # Optional. Status of the operation. Known values are:
                      "Requesting", "Executing", "Succeeded", and "Failed".
                }
        """

    @distributed_trace
    def begin_restart(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        force_parameter: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Restart a Bare Metal Instance.

        The operation to restart an Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param force_parameter: When set to 'active', this parameter empowers the server with the
         ability to forcefully terminate and halt any existing processes that may be running on the
         server. Is either a JSON type or a IO type. Default value is None.
        :type force_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                force_parameter = {
                    "forceState": "str"  # Optional. Whether to force restart by shutting all
                      processes. Known values are: "active" and "inactive".
                }

                # response body for status code(s): 200
                response == {
                    "error": {
                        "code": "str",  # Optional. Server-defined set of error codes.
                        "message": "str"  # Optional. Human-readable representation of the
                          error.
                    },
                    "name": "str",  # Optional. Unique Operation Status Identifier.
                    "startTime": "str",  # Optional. Start Time when the operation was initially
                      executed.
                    "status": "str"  # Optional. Status of the operation. Known values are:
                      "Requesting", "Executing", "Succeeded", and "Failed".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._restart_initial(
                resource_group_name=resource_group_name,
                azure_bare_metal_instance_name=azure_bare_metal_instance_name,
                force_parameter=force_parameter,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _shutdown_initial(
        self, resource_group_name: str, azure_bare_metal_instance_name: str, **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        request = build_azure_bare_metal_instances_shutdown_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_instance_name=azure_bare_metal_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            response_headers["location"] = self._deserialize("str", response.headers.get("location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace
    def begin_shutdown(
        self, resource_group_name: str, azure_bare_metal_instance_name: str, **kwargs: Any
    ) -> LROPoller[JSON]:
        """Shutdown a Bare Metal Instance.

        The operation to shutdown an Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "error": {
                        "code": "str",  # Optional. Server-defined set of error codes.
                        "message": "str"  # Optional. Human-readable representation of the
                          error.
                    },
                    "name": "str",  # Optional. Unique Operation Status Identifier.
                    "startTime": "str",  # Optional. Start Time when the operation was initially
                      executed.
                    "status": "str"  # Optional. Status of the operation. Known values are:
                      "Requesting", "Executing", "Succeeded", and "Failed".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._shutdown_initial(
                resource_group_name=resource_group_name,
                azure_bare_metal_instance_name=azure_bare_metal_instance_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """Returns a list of Azure Bare Metal Instances in the specified subscription.

        Returns a list of Azure Bare Metal Instances in the specified subscription. The operations
        returns various properties of each Azure Bare Metal Instance.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_azure_bare_metal_instances_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Gets a list of Azure Bare Metal Instances in the specified subscription and resource group.

        Gets a list of Azure Bare Metal Instances in the specified subscription and resource group. The
        operations returns various properties of each Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_azure_bare_metal_instances_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, resource_group_name: str, azure_bare_metal_instance_name: str, **kwargs: Any) -> JSON:
        """Gets an Azure Bare Metal Instance.

        Gets an Azure Bare Metal Instance for the specified subscription, resource group, and instance
        name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_azure_bare_metal_instances_get_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_instance_name=azure_bare_metal_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        tags_parameter: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Instance.

        Patches the Tags field of a Azure Bare Metal Instance for the specified subscription, resource
        group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Required.
        :type tags_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                tags_parameter = {
                    "tags": {
                        "str": "str"  # Optional. Tags field of the
                          AzureBareMetal/AzureBareMetaStorage instance.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        tags_parameter: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Instance.

        Patches the Tags field of a Azure Bare Metal Instance for the specified subscription, resource
        group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Required.
        :type tags_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_instance_name: str,
        tags_parameter: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Instance.

        Patches the Tags field of a Azure Bare Metal Instance for the specified subscription, resource
        group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_instance_name: Name of the Azure Bare Metal Instance, also known as the
         ResourceName. Required.
        :type azure_bare_metal_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Is either a JSON
         type or a IO type. Required.
        :type tags_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                tags_parameter = {
                    "tags": {
                        "str": "str"  # Optional. Tags field of the
                          AzureBareMetal/AzureBareMetaStorage instance.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalInstanceId": "str",  # Optional. Specifies the Azure
                          Bare Metal Instance unique ID.
                        "hardwareProfile": {
                            "azureBareMetalInstanceSize": "str",  # Optional. Specifies
                              the Azure Bare Metal Instance SKU. Known values are: "S72m", "S144m",
                              "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224", "S224m",
                              "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
                              "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo",
                              "S448se", "S576m", "S576xm", "S672", "S672m", "S672om", "S672oo",
                              "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896", "S896m",
                              "S896om", "S896oo", "S896oom", "S896ooo", and "S960m".
                            "hardwareType": "str"  # Optional. Name of the hardware type
                              (vendor and/or their product name). Known values are: "Cisco_UCS", "HPE",
                              and "SDFLEX".
                        },
                        "hwRevision": "str",  # Optional. Hardware revision of an Azure Bare
                          Metal Instance.
                        "networkProfile": {
                            "circuitId": "str",  # Optional. Specifies the circuit id for
                              connecting to express route.
                            "networkInterfaces": [
                                {
                                    "ipAddress": "str"  # Optional. Specifies the
                                      IP address of the network interface.
                                }
                            ]
                        },
                        "osProfile": {
                            "computerName": "str",  # Optional. Specifies the host OS
                              name of the Azure Bare Metal instance.
                            "osType": "str",  # Optional. This property allows you to
                              specify the type of the OS.
                            "sshPublicKey": "str",  # Optional. Specifies the SSH public
                              key used to access the operating system.
                            "version": "str"  # Optional. Specifies version of operating
                              system.
                        },
                        "partnerNodeId": "str",  # Optional. ARM ID of another
                          AzureBareMetalInstance that will share a network with this
                          AzureBareMetalInstance.
                        "powerState": "str",  # Optional. Resource power state. Known values
                          are: "starting", "started", "stopping", "stopped", "restarting", and
                          "unknown".
                        "provisioningState": "str",  # Optional. State of provisioning of the
                          AzureBareMetalInstance. Known values are: "Accepted", "Creating", "Updating",
                          "Failed", "Succeeded", "Deleting", and "Migrating".
                        "proximityPlacementGroup": "str",  # Optional. Resource proximity
                          placement group.
                        "storageProfile": {
                            "nfsIpAddress": "str",  # Optional. IP Address to connect to
                              storage.
                            "osDisks": [
                                {
                                    "diskSizeGB": 0,  # Optional. Specifies the
                                      size of an empty data disk in gigabytes.
                                    "lun": 0,  # Optional. Specifies the logical
                                      unit number of the data disk. This value is used to identify data
                                      disks within the VM and therefore must be unique for each data
                                      disk attached to a VM.
                                    "name": "str"  # Optional. The disk name.
                                }
                            ]
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(tags_parameter, (IOBase, bytes)):
            _content = tags_parameter
        else:
            _json = tags_parameter

        request = build_azure_bare_metal_instances_update_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_instance_name=azure_bare_metal_instance_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.baremetalinstances.BareMetalInfrastructureClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists all of the available consumption REST API operations.

        Gets a list of AzureBareMetal management operations.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # Optional. Enum. Indicates the action type. "Internal"
                      refers to actions that are for internal only APIs. "Internal"
                    "display": {
                        "description": "str",  # Optional. The short, localized friendly
                          description of the operation; suitable for tool tips and detailed views.
                        "operation": "str",  # Optional. The concise, localized friendly name
                          for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
                          Machine", "Restart Virtual Machine".
                        "provider": "str",  # Optional. The localized friendly form of the
                          resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
                          Compute".
                        "resource": "str"  # Optional. The localized friendly name of the
                          resource type related to this operation. E.g. "Virtual Machines" or "Job
                          Schedule Collections".
                    },
                    "isDataAction": bool,  # Optional. Whether the operation applies to
                      data-plane. This is "true" for data-plane operations and "false" for
                      ARM/control-plane operations.
                    "name": "str",  # Optional. The name of the operation, as per Resource-Based
                      Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
                      "Microsoft.Compute/virtualMachines/capture/action".
                    "origin": "str"  # Optional. The intended executor of the operation; as in
                      Resource Based Access Control (RBAC) and audit logs UX. Default value is
                      "user,system". Known values are: "user", "system", and "user,system".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class AzureBareMetalStorageInstancesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.baremetalinstances.BareMetalInfrastructureClient`'s
        :attr:`azure_bare_metal_storage_instances` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """Gets a list of Azure Bare Metal Storage instances in the specified subscription.

        Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations
        returns various properties of each Azure Bare Metal Instance.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_azure_bare_metal_storage_instances_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource
        group.

        Gets a list of AzureBareMetalStorage instances in the specified subscription and resource
        group. The operations returns various properties of each Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_azure_bare_metal_storage_instances_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, resource_group_name: str, azure_bare_metal_storage_instance_name: str, **kwargs: Any) -> JSON:
        """Gets an Azure Bare Metal Storage instance.

        Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and
        instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_azure_bare_metal_storage_instances_get_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create an azure bare metal storage resource.

        Create an azure bare metal storage resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Required.
        :type request_body_parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                request_body_parameters = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create an azure bare metal storage resource.

        Create an azure bare metal storage resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Required.
        :type request_body_parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create an azure bare metal storage resource.

        Create an azure bare metal storage resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Is either a JSON type or a IO type.
         Required.
        :type request_body_parameters: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                request_body_parameters = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body_parameters, (IOBase, bytes)):
            _content = request_body_parameters
        else:
            _json = request_body_parameters

        request = build_azure_bare_metal_storage_instances_create_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        tags_parameter: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Storage instance.

        Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Required.
        :type tags_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                tags_parameter = {
                    "tags": {
                        "str": "str"  # Optional. Tags field of the
                          AzureBareMetal/AzureBareMetaStorage instance.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        tags_parameter: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Storage instance.

        Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Required.
        :type tags_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        tags_parameter: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Patches the Tags field of a Azure Bare Metal Storage instance.

        Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param tags_parameter: Request body that only contains the new Tags field. Is either a JSON
         type or a IO type. Required.
        :type tags_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                tags_parameter = {
                    "tags": {
                        "str": "str"  # Optional. Tags field of the
                          AzureBareMetal/AzureBareMetaStorage instance.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. E.g.
                      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "azureBareMetalStorageInstanceUniqueIdentifier": "str",  # Optional.
                          Specifies the AzureBareMetaStorageInstance unique ID.
                        "storageProperties": {
                            "generation": "str",  # Optional. the kind of storage
                              instance.
                            "hardwareType": "str",  # Optional. the hardware type of the
                              storage instance.
                            "offeringType": "str",  # Optional. the offering type for
                              which the resource is getting provisioned.
                            "provisioningState": "str",  # Optional. State of
                              provisioning of the AzureBareMetalStorageInstance. Known values are:
                              "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting",
                              "Canceled", and "Migrating".
                            "storageBillingProperties": {
                                "azureBareMetalStorageInstanceSize": "str",  #
                                  Optional. the SKU type that is provisioned.
                                "billingMode": "str"  # Optional. the billing mode
                                  for the storage instance.
                            },
                            "storageType": "str",  # Optional. the storage protocol for
                              which the resource is getting provisioned.
                            "workloadType": "str"  # Optional. the workload for which the
                              resource is getting provisioned.
                        }
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(tags_parameter, (IOBase, bytes)):
            _content = tags_parameter
        else:
            _json = tags_parameter

        request = build_azure_bare_metal_storage_instances_update_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, azure_bare_metal_storage_instance_name: str, **kwargs: Any
    ) -> None:
        """Delete an AzureBareMetalStorageInstance.

        Delete an AzureBareMetalStorageInstance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_azure_bare_metal_storage_instances_delete_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
